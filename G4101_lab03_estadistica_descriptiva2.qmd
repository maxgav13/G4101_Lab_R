---
title: "Lab 3: Estadistica Descriptiva 2"
author: "Maximiliano Garnier Villarreal"
lang: es
toc: true
toc-depth: 3
toc-title: Contenidos
number-sections: true
highlight-style: pygments
theme: sandstone
format:
  html:
    code-fold: true
    code-summary: "Codigo"
    code-tools: true
    html-math-method: katex
  pdf: default
  docx: default
execute:
  warning: false
  error: false
  echo: true
---

# Paquetes

```{r}
#| label: setup
#| include: false

library(kableExtra)     # tablas
library(gtsummary)      # tablas
library(flextable)      # tablas
library(DescTools)      # funciones estadisticas
library(janitor)        # tablas
library(highcharter)    # graficos interactivos
library(modelsummary)   # modelos
library(broom)          # resumenes tidy modelos
library(tidyverse)
library(easystats)
library(rio)

theme_set(theme_minimal(base_size = 14))

options(
  modelsummary_get = 'all'
  # OutDec = ','
  , digits = 3
)

set_flextable_defaults(
  # decimal.mark = ',',
  # big.mark = '.',
  digits = 3
)

theme_gtsummary_language(
  language = "es",
  # decimal.mark = ',',
  # big.mark = '.',
  iqr.sep = NULL,
  ci.sep = NULL
)

```

# Estadistica descriptiva bivariable

Vamos a usar los datos de `airquality`.

```{r}
#| label: datos
#| tbl-cap: Datos de airquality modificados


airq = airquality %>% 
  as_tibble() %>% 
  mutate(Month = as_factor(Month),
         Day = as_factor(Day)) %>% 
  mutate(across(.cols = where(is.numeric),
                # .cols = 1:4,
                .fns = list(c = center, z = standardize),
                # .fns = ~ .x - mean(.x, na.rm = T),
                # .names = '{.col}_c')
                .names = '{.col}_{.fn}')
                )

airq %>% head() %>%
  flextable() %>%
  colformat_double(j = 7:14) %>%
  fit_to_width(max_width = 7)
```

```{r datos-num}
airq2 = airq %>% 
  select(where(is.numeric) & !ends_with(c('_c','_z')))

airq2 %>% head() %>% gt::gt()
```

## Covarianza & Correlacion

Las funciones covarianza (`cov`) y correlacion (`cor`) pueden actuar sobre vectores o sobre DataFrames. En estos ultimos el resultado va a ser una matriz de covarianza o correlacion, en su mayoria se requiere que el DataFrame sea numerico, sin columnas de texto o factores.

Aqui se extraen las variables de interes

```{r}
x = airq$Solar.R
y = airq$Temp
```

Se usan als funciones basicas para correlacion y covarianza

```{r cov-cor}
cov(x,y,use = 'pairwise.complete.obs') # covarianza
cor(x,y,method = "pearson",
    use = 'pairwise.complete.obs') # coeficiente de correlacion de Pearson
```

Matrices de correlacion y covarianza del DataFrame con unicamente variables numericas

```{r cov-cor-mat}
cov(airq2, use = 'pairwise.complete.obs') # matriz de varianza-covarianza
cor(airq2, use = 'pairwise.complete.obs') # matriz de correlacion de Pearson
```

```{r cor-tb}
corrr::correlate(airq2, diagonal = 1, 
                 method = 'pearson') %>%
  flextable() %>%
  colformat_double()
```

```{r cor-pairs}
correlation(airq2, method = 'pearson') %>%
  tibble() %>%
  flextable() %>%
  colformat_double() %>% 
  fit_to_width(max_width = 7)
```

```{r}
datasummary_correlation(airq2)
```

Grafico estatico de coeficientes de correlacion

```{r cor-mat-fig}
ggstatsplot::ggcorrmat(airq2)
```

```{r}
corrplot::corrplot(cor(airq2,method = 'pearson',
                       use = 'pairwise.complete.obs'),
                   method = 'ellipse')
```

El siguiente codigo genera un grafico interactivo de la matriz de correlacion (Solo se despliega en formato HTML).

```{r eval=knitr::is_html_output()}
hchart(cor(airq2,use = 'pairwise.complete.obs')) # grafico interactivo de coeficientes de correlacion
```

## Regresion

Para presentar caracteristicas de los modelos de forma mas estetica y ordenada se pueden usar las funciones `tidy` y `glance` del paquete **broom**, o `model_parameter` y `model_performance` de los paquetes **parameters** y **performance**, respectivamente. `tidy` y `model_parameter` generan la tabla resumen de los coeficientes y sus estadisticas, mientras que `glance` y `model_performance` generan una tabla con medidas de ajuste, incluyendo el $R^2$.

### Relacion entre correlacion y regresion simple

En una regresion simple ($y \sim x$, un predictor) el coeficiente de correlacion (y covarianza) entre ambas variables va a ser igual a la pendiente de la regresion cuando se usan variables estandarizadas ($z \sim N(0,1)$) o se estandariza el modelo con las variables originales.

Usando variables estandarizadas

```{r cor-z-mod}
lm(Temp_z ~ Wind_z, data = airq) %>% 
  tidy() %>%
  flextable() %>%
  colformat_double()
```

Estandarizando el modelo con variables originales

```{r cor-mod-z}
lm(Temp ~ Wind, data = airq) %>% 
  standardize_parameters(method = 'refit') %>%
  flextable() %>%
  colformat_double()
```

Correlacion y covarianza entre variables estandarizadas

```{r cor-cov-z}
with(airq, cor(Temp_z, Wind_z))

with(airq, cov(Temp_z, Wind_z))
```

### Lineal

$y \thicksim \hat{b}_0 + \hat{b}_1x + \epsilon$

```{r mod-lin}
mod1 = lm(Temp ~ Solar.R, data = airq) # modelo de regresion lineal
```

Coeficientes del modelo

```{r mod-lin-param}
mod1 %>% tidy() %>%
  flextable() %>%
  colformat_double()

mod1 %>% model_parameters() %>%
  flextable() %>%
  colformat_double()
```

Ajuste del modelo

```{r mod-lin-fit}
mod1 %>% glance() %>%
  flextable() %>%
  colformat_double() %>% 
  fit_to_width(max_width = 7)

mod1 %>% model_performance() %>%
  flextable() %>%
  colformat_double()
```

```{r mod-lin-cv}
sjstats::cv(mod1) # cv
```

Cuadro resumen del modelo

```{r mod-lin-gts}
tbl_regression(mod1,
               # intercept = T
               estimate_fun = purrr::partial(style_sigfig, digits = 3),
               pvalue_fun = ~papaja::printp(.x, digits = 3)) %>%
  modify_header(list(label ~ "",estimate ~ "**Coeficiente**",
                     p.value ~ "**valor-p**")) %>% 
  add_glance_source_note(glance_fun = performance::model_performance,
                         include = c(R2,R2_adjusted,RMSE,Sigma,AIC))
```

Graficos diagnostico

```{r mod-check-1}
# plot(mod1) 
check_model(mod1,panel=F)
```

### Cuadratica

$y \thicksim \hat{b}_0 + \hat{b}_1x + \hat{b}_2x^2 + \epsilon$

```{r mod-cuad}
mod2 = lm(Temp ~ Solar.R + I(Solar.R^2), data = airq) # modelo de regresion cuadratica
```

Coeficientes del modelo

```{r mod-cuad-param}
mod2 %>% tidy()
mod2 %>% model_parameters()
```

Ajuste del modelo

```{r mod-cuad-fit}
mod2 %>% glance()
mod2 %>% model_performance()
```

```{r mod-cuad-cv}
sjstats::cv(mod2) # cv
```

Cuadro resumen del modelo

```{r mod-cuad-gts}
tbl_regression(mod2,
               # intercept = T
               estimate_fun = purrr::partial(style_sigfig, digits = 3),
               pvalue_fun = ~papaja::printp(.x, digits = 3)) %>%
  modify_header(list(label ~ "",estimate ~ "**Coeficiente**",
                     p.value ~ "**valor-p**")) %>% 
  add_glance_source_note(glance_fun = performance::model_performance,
                         include = c(R2,R2_adjusted,RMSE,Sigma,AIC))
```

Graficos diagnostico

```{r mod-check-2}
# plot(mod2) 
check_model(mod2,panel=F)
```

### Compara modelos

Diferentes funciones para comparar modelos entre si

```{r comp-mod1}
TMod(mod1,mod2) # DescTools
```

```{r comp-mod2}
modelsummary(list(Lineal=mod1,Cuadratico=mod2),
             title = 'Comparacion de modelos',
             statistic = NULL, # 'conf.int',
             coef_omit = NULL, # 'Int'
             gof_omit = '^(?!R|Num|A)',
             stars = F,
             fmt = 4)
```

```{r comp-mod3}
sjPlot::tab_model(mod1,mod2,
                  title = 'Comparacion de modelos',
                  show.std = NULL, # 'std', NULL
                  show.intercept = T,
                  show.ci = F, # .95
                  collapse.ci = F,
                  ci.hyphen = ', ',
                  show.stat = F,
                  show.p = F,
                  show.aic = T,
                  dv.labels = c('Lineal','CuadrÃ¡tico'),
                  digits = 4,
                  file = 'sjplot_models_lab3.doc')
```

```{r comp-mod4}
comp.mods = compare_performance(mod1,mod2,rank = T) # performance
comp.mods
plot(comp.mods)
```

## Graficos

Para agregar lineas de tendencia en graficos de **ggplot2** se usa la funcion `geom_smooth`. Por defecto ajusta una curva loess, pero para cambiarlo se usa `method = 'lm'`, y para especificar una ecuacion diferente a la regresion simple se usa `formula`, donde `y` y `x` son genericos, **NO** hay que poner el nombre de las variables que se esta graficando.

```{r dispersion}
ggplot(airq, aes(Solar.R,Temp)) + 
  geom_point()
```

```{r regresion-suavizada}
ggplot(airq, aes(Solar.R,Temp)) + 
  geom_point() + 
  geom_smooth()
```

Grafico de regresion lineal

```{r regresion-lin}
ggplot(airq, aes(Solar.R,Temp)) + 
  geom_point() + 
  geom_smooth(method = 'lm')
```

Grafico de regresion cuadratica

```{r regresion-cuad}
ggplot(airq, aes(Solar.R,Temp)) + 
  geom_point() + 
  geom_smooth(method = 'lm', formula = y~poly(x, 2))
```

Grafico de regresion lineal y cuadratica

```{r regresion-lin-cuad}
ggplot(airq, aes(Solar.R,Temp)) + 
  geom_point() + 
  geom_smooth(method = 'lm', aes(col='Lineal')) + 
  geom_smooth(method = 'lm', aes(col='Cuadratico'), 
              formula = y~poly(x, 2)) +
  scale_color_brewer('Modelo',palette = 'Dark2')
```

# Probabilidad

Es mejor trabajar con la tabla completa de datos, no solo la tabla de contigencia, por lo que se puede generar la primera a partir de la segunda con la funcion `Untable` de **DescTools**. Posteriormente con las funciones `tbl_cross` de **gtsummary** y `tabyl` y `adorn_*` de **janitor**, se puede manipular la tabla para obtener los valores deseados.

```{r prob}
A = matrix(data = c(15,24,23,14,11,13),nrow = 2,
           dimnames = list(Tipo=c('X','Y'),
                           Capa=c('A','B','C')))

A.tb = Untable(A) %>% tibble()

tbl_cross(A.tb)
tbl_cross(A.tb, percent = 'cell')
tbl_cross(A.tb, percent = 'column')
tbl_cross(A.tb, percent = 'row')
tbl_cross(A.tb, percent = 'row', digits = c(0,1))

A.tb %>% 
  tabyl(Tipo,Capa) %>% 
  adorn_totals(where = c('row','col'))

A.tb %>% 
  tabyl(Tipo,Capa) %>% 
  adorn_totals(where = c('row','col')) %>% 
  adorn_percentages(denominator = 'col') %>% 
  adorn_pct_formatting()

A.tb %>% filter(Capa=='A') %>% tabyl(Tipo)
A.tb %>% filter(Tipo=='Y') %>% tabyl(Capa)
```
