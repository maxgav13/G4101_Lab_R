---
title: "Lab 2: Estadistica Descriptiva 1"
author: "Maximiliano Garnier Villarreal"
lang: es
toc: true
toc-depth: 2
toc-title: Contenidos
number-sections: true
highlight-style: pygments
theme: sandstone
format:
  html:
    code-fold: true
    html-math-method: katex
  pdf: default
  docx: default
execute:
  warning: false
  error: false
  echo: true
---

# Estadistica descriptiva

```{r setup, include=FALSE, warning=F, message=FALSE}
library(DescTools)
library(janitor)
library(gtsummary)
library(tidyverse)
library(rio)

theme_set(theme_minimal(base_size = 12))

formato.salida = case_when(
  knitr::is_html_output() ~ 'html',
  knitr::is_latex_output() ~ 'latex',
  T  ~ 'simple',
)

options(
  knitr.table.format = formato.salida
  # OutDec = ','
  , digits = 3
)

theme_gtsummary_language(
  language = "es",
  # decimal.mark = ',',
  # big.mark = '.',
  iqr.sep = NULL,
  ci.sep = NULL
)

knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  error = FALSE,
  # fig.path = "figs/",
  fig.retina = 3,
  fig.width = 8,
  fig.asp = 0.618,
  fig.align = "center",
  out.width = "90%"
)
```


## Calculos rapidos

Se habia mencionado antes que el paquete `purrr` permite iterar sobre vectores, listas o DataFrames. En el caso de este ultimo objeto lo que hace es iterar sobre las columnas.

La funcion basica de `purrr` es `map(.x, .f, ...)`, donde `.x` es el objeto sobre el cual iterar, `.f` es la funcion o tarea a realizar durante la iteracion, y `...` son argumentos extra dependiendo de la funcion. Esta funcion siempre va a resultar en una lista; las variaciones de esta son especificas para cuando se conoce cual va a ser el tipo de dato de salida. `map_dbl` (como en el ejemplo) se usa cuando el resultado de la funcion es un numero con decimales.

```{r}
rock %>% head()

map_dbl(.x = rock,.f = sum) # suma de cada columna

map_dbl(rock,mean) # media de cada columna

map_dbl(rock,sd) # desviacion estandar de cada columna
```


## Datos categoricos

### Tabla de frecuencias

La forma numerica de resumir datos categoricos es por medio de tablas de frecuencias o tablas de contingencia. Hay diferentes funciones para realizar estas tareas, aqui se muestran 3: `ftable` del paquete basico, `tabyl` del paquete *janitor*, y `tbl_cross` del paquete *gtsummary*. Estos ultimos 2 paquetes permiten generar tablas mas esteticas y con gran detalle.

```{r}
dat1 = import("data/LungCapData2.csv", setclass = 'tbl')

tabyl(dat = dat1,var1 = Gender,var2 = Smoke) %>% 
  adorn_title()

ftable(Smoke~Gender,dat1)

tabyl(dat1,Smoke)

tabyl(dat1,Gender,Smoke) %>% 
  adorn_percentages('col') %>% 
  adorn_title()

tabyl(dat1,Gender,Smoke) %>% 
  adorn_percentages('all') %>%
  adorn_pct_formatting(digits = 2) %>% 
  adorn_title()

tbl_cross(dat1,Gender,Smoke,percent = 'cell')
```

### Graficos

#### Barras

Para `geom_bar` el argumento *position* puede tener cualquiera de estos tres valores: 'stack', 'dodge' o 'fill.'

```{r}
ggplot(data = dat1, aes(x = Gender)) +
  geom_bar()

ggplot(data = dat1, aes(x = Gender,fill=Smoke)) +
  geom_bar(position = 'stack')
```


## Datos continuos

```{r}
data("airquality")
head(airquality)

map_dbl(.x = airquality,.f = mean)

map_dbl(airquality,mean,na.rm=T)

airquality %>% map_dbl(~ mean(.x,na.rm = T))

airquality %>% map_df(~ mean(.x,na.rm = T))
```

### Tabla de Frecuencias

Para tablas de frecuencias con datos numericos estos deben ser separados en clases (*breaks*) y sobre estas clases se genera la tabla de frecuencias.

```{r}
Freq(x = airquality$Temp)

Freq(airquality$Temp, breaks = 6)

Freq(airquality$Temp, breaks = seq(50,100,10))
```

### Graficos

#### Histograma

Dentro de `geom_histogram` hay 3 opciones para definir la discretizacion:

* bins = Numero de clases
* binwidth = El ancho de las clases
* breaks = Un vector con los puntos donde separar los datos

*Frecuencias absolutas*

```{r}
ggplot(data = airquality, aes(x = Temp)) + 
  geom_histogram(binwidth = 5, col='black', fill='lightblue')
```

*Frecuencias relativas*

```{r}
ggplot(data = airquality, aes(x = Temp)) + 
  geom_histogram(binwidth = 5, aes(y=stat(count/sum(count))), 
                 col='black', fill='lightblue')
```

```{r}
tabyl(airquality,Month)

airq = airquality %>% 
  mutate(Month = factor(Month,
                        levels = 5:9,
                        labels = c("Mayo", "Junio", "Julio", 
                                   "Agosto", "Setiembre")))

tabyl(airq,Month)
```

#### Grafico de caja

```{r}
ggplot(data = airq, aes(x = Month, y = Temp)) +
  geom_boxplot()

ggplot(data = airq, aes(x = Month, y = Temp)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = 'point', shape=3)
``` 

### Medidas de tendencia central

Se muestran diferentes funciones para caracterizar la tendencia central en un vector corriente, uno con un valor atipico y otro con un valor faltante, para ver como se ven afectadas las diferentes estadisticas.

```{r}
myvector = c(22,10,10,16,15,15,24,19,15,
             19,18,16,18,12,17,17,11,18)
summary(myvector)
mean(myvector)
median(myvector)
DescTools::Gmean(myvector) # media geometrica
DescTools::Mode(myvector) # moda

outlier = c(myvector,200)
summary(outlier)
mean(outlier)
median(outlier)
DescTools::Gmean(outlier)
DescTools::Mode(outlier)

miss = c(myvector,NA)
summary(miss)
mean(miss, na.rm = T)
median(miss, na.rm = T)
DescTools::Gmean(miss, na.rm = T)
DescTools::Mode(miss, na.rm = T)
```

### Medidas de dispersion

```{r}
summary(myvector)
range(myvector)
diff(range(myvector))
var(myvector) # varianza
sd(myvector) # desviacion estandar
DescTools::CoefVar(myvector) # coeficiente de variacion
IQR(myvector) # rango intercuartil
mad(myvector) # desviacion absoluta de la mediana
sd(outlier)
mad(outlier)
```

### Asimetria y Curtosis

```{r}
e1071::skewness(myvector) # asimetria
e1071::kurtosis(myvector) # curtosis
DescTools::Skew(myvector)
DescTools::Kurt(myvector)
```

### Descripciones mas generales

Se muestran varias funciones que generan un resumen general de un DataFrame dependiendo del tipo de variable presente.

```{r}
skimr::skim(myvector)
psych::describe(myvector)
DescTools::Desc(myvector)
summarytools::descr(myvector)
```

