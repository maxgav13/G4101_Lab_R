---
title: "Lab 4: Distribuciones de probabilidad"
author: "Maximiliano Garnier Villarreal"
lang: es
toc: true
toc-depth: 3
toc-title: Contenidos
number-sections: true
highlight-style: pygments
theme: sandstone
format:
  html:
    embed-resources: true
    code-fold: true
    code-summary: "Codigo"
    code-tools: true
    html-math-method: katex
  pdf: 
    prefer-html: false
  docx: default
execute:
  warning: false
  error: false
  echo: true
---

# Paquetes

```{r}
#| label: setup
#| include: false

library(tidyverse)

theme_set(theme_minimal(base_size = 14))
```

# Distribuciones

En general existen 4 fucniones basicas para todas las distribuciones, empiezan con las letras `d`, `p`, `q` y `r` y les sigue el nombre de la distribucion.

-   `d`: para encontrar la probabilidad puntual,
-   `p`: para encontrar la probabilidad acumulada,
-   `q`: para encontrar el cuantil (valor de la variable) a una dada probabilidad, y
-   `r`: para generar un vector de datos aleatorios de la distribucion

En el caso de generar datos aleatorios (`r`) es recomendable definir un punto de partida para asegurar siempre el mismo resultado, esto se logra definiendo lo que se llama la semilla (seed) por medio de `set.seed(numero)` y escribiendo un numero entero dentro de la funcion (por ejemplo: `set.seed(4101)`).

## Binomial

Para esta distribucion los parametros son:

-   `x`: Numero de exitos para el cual se requiere la probabilidad
-   `size`: El numero total de intentos
-   `prob`: La probabilidad de exito

```{r}
x = 1
n = 6
p = .1
dbinom(x = x,size = n,prob = p) # probabilidad puntual
pbinom(q = x,size = n,prob = p) # probabilidad acumulada
sum(dbinom(0:1,n,p)) # probabilidad acumulada

1 - pbinom(x,n,p) # probabilidad para MAS de x aciertos
pbinom(x,n,p,lower.tail = F) # area a la derecha

# Calculo de probabilidad binomial a una serie de intentos 
x2 = 0:6
n2 = 6
p2 = 0.1
dbinom(x2,n2,p2)
pbinom(x2,n2,p2)
```

```{r fig-dist-binom}
#| fig-cap: 'Distribucion binomial'
#| fig-subcap:
#|   - 'Funcion de probabilidad'
#|   - 'Funcion de probabilidad acumulada'
#| layout-ncol: 2

data.frame(x=x2,y=dbinom(x2,n2,p)) %>% 
  ggplot(aes(x,y))+
  geom_col(width = .5,fill='blue')+
  theme_bw()

data.frame(x=x2,y=pbinom(x2,n2,p)) %>% 
  ggplot(aes(x,y))+
  geom_col(width = .5,fill='blue')+
  theme_bw()
```

## Poisson

Para esta distribucion los parametros son:

-   `x`: Numero de exitos para el cual se requiere la probabilidad
-   `lambda`: El promedio de exitos por unidad de tiempo/espacio

```{r}
x3 = 2
lambda = .929 # media de ocurrencias sobre lapso de tiempo o espacio
dpois(x = x3,lambda = lambda) # probabilidad puntual
ppois(q = x3,lambda = lambda) # probabilidad acumulada

1 - ppois(x3,lambda) # probabilidad para MAS de x ocurrencias
ppois(x3,lambda,lower.tail = F)

# Calculo de probabilidad Poisson a una serie de intentos 
x4 = 0:6
lambda = .929
dpois(x4,lambda)
ppois(x4,lambda)
```

```{r fig-dist-pois}
#| fig-cap: 'Distribucion de Poisson'
#| fig-subcap:
#|   - 'Funcion de probabilidad'
#|   - 'Funcion de probabilidad acumulada'
#| layout-ncol: 2

data.frame(x=x4,y=dpois(x4,lambda)) %>% 
  ggplot(aes(x,y))+
  geom_col(width = .5,fill='orange')+
  theme_bw()

data.frame(x=x4,y=ppois(x4,lambda)) %>% 
  ggplot(aes(x,y))+
  geom_col(width = .5,fill='orange')+
  theme_bw()
```

## Normal

Para esta distribucion los parametros son:

-   `mean`: Media del evento
-   `sd`: Desviacion estandar del evento

```{r}
pnorm(q = 1.84,lower.tail = F) # probabilidad de Z mayor a 1.84

ggplot() + 
    xlim(-3,3) +
    stat_function(geom = 'line', fun = dnorm, args = list(mean=0,sd=1)) + 
    stat_function(geom = 'area', fun = dnorm, args = list(mean=0,sd=1), 
                  xlim = c(1.84,3), fill = 'dodgerblue')
```

```{r}
pnorm(q = 0.86) - pnorm(q = -1.97) # probabilidad de Z entre -1.97 y 0.86

ggplot() + 
    xlim(-3,3) +
    stat_function(geom = 'line', fun = dnorm, args = list(mean=0,sd=1)) + 
    stat_function(geom = 'area', fun = dnorm, args = list(mean=0,sd=1), 
                  xlim = c(-1.97,.86), fill = 'dodgerblue')
```

```{r}
# media=50, sigma=10
pnorm(q = 62,mean = 50,sd = 10) - pnorm(q = 45,mean = 50,sd = 10) # probabilidad de 45 < X < 62

ggplot() + 
    xlim(20,80) +
    stat_function(geom = 'line', fun = dnorm, args = list(mean=50,sd=10)) + 
    stat_function(geom = 'area', fun = dnorm, args = list(mean=50,sd=10), 
                  xlim = c(45,62), fill = 'dodgerblue')

(62-50)/10;(45-50)/10
pnorm(q = 1.2)-pnorm(q = -.5)
```

```{r}
# media=300, sigma=50
pnorm(q = 362,mean = 300,sd = 50,lower.tail = F) # probabilidad de X > 362

ggplot() + 
    xlim(150,450) +
    stat_function(geom = 'line', fun = dnorm, args = list(mean=300,sd=50)) + 
    stat_function(geom = 'area', fun = dnorm, args = list(mean=300,sd=50), 
                  xlim = c(362,450), fill = 'dodgerblue')
```

```{r}
# media=40, sigma=6
qnorm(p = .45,mean = 40,sd = 6) # X para 45% de los datos a la izquierda
qnorm(p = .14,mean = 40,sd = 6,lower.tail = F) # X para 14% de los datos a la derecha
```

# Simulaciones

Repasando como se comportan datos logicos con funciones aritmeticas

```{r}
v = 1:20
v < 6
sum(v < 6)
mean(v < 6)
```

Se muestra como relizar calculos de probabilidades usando datos simulados, recreando algunos de los ejemplos anteriormente mostrados.

```{r}
set.seed(10)
n = 1000
mean(rnorm(n = 10)) # 10 datos para Z~N(0,1)
mean(rnorm(n = 10,mean = 50,sd = 6)) # 10 datos para X~N(50,6)
mean(rnorm(n = n,mean = 50,sd = 10) < 62) - 
  mean(rnorm(n = n,mean = 50,sd = 10) < 45) # probabilidad de 45 < X < 62
mean(rnorm(n = n,mean = 300,sd = 50) > 362) # probabilidad de X > 362, media=300, sigma=50
```

```{r}
mean(rpois(n = n,lambda = lambda) == 2) # probabilidad de X = 2
mean(rpois(n = n,lambda = lambda) > 2) # probabilidad de X > 2
```
