---
title: "Introduccion a R"
author: "Maximiliano Garnier Villarreal"
lang: es
toc: true
toc-depth: 2
toc-title: Contenidos
number-sections: true
highlight-style: pygments
theme: sandstone
format:
  html:
    code-fold: true
    html-math-method: katex
  pdf: default
  docx: default
execute:
  warning: false
  error: false
  echo: true
---

# Basico

## Paquetes

Como instalar y cargar paquetes instalados

```{r eval=FALSE}
install.packages("devtools")
library(MASS)
library(tidyverse)
```

## Directorio de trabajo

Mas importante para documentos `.R` que para `.Rmd`

```{r eval=FALSE}
getwd()
setwd("~/Documents/UCR/Docencia/G 4101 - Geologia Numerica/2017-I/datasets")
setwd("~/Documents/R")
```

## Ayuda en R


```{r eval=FALSE}
?mean
```

## Operaciones basicas

**R** puede funcionar como una calculadora basica, donde es posible relizar operaciones aritmeticas sencillas.

```{r}
1+2
1-2
1*2
1/2
sqrt(125)
```

## Crear objetos

Objetos se pueden crear usando los operadores `<-` o `=`. Al crear un objeto este no se despliega en la consola a menos que uno lo llame directamente o que a la hora de crealo sea encerrado con parentesis.

```{r}
x <- 14
(y = 2)
x
x + y
z = x + y
```

## Espacio de trabajo

Muestra los objetos en el ambiente de trabajo.

```{r}
ls()
```

## Vectores

Los vectores son unidimensionales y deben ser del mismo tipo. Aqui se muestran los diferentes tipos, y como crearlos. Los mas importante tipos son *Numericos*, *Texto*, y *Factores*.

### Numericos

Se pueden crear vectores numericos a partir de datos puntuales.

```{r}
x <- c(1,2,3,4,5)
y <- c(6,7,8,9,10)
```

O se pueden crear vectores en secuencia (`seq(from = ,to = ,by = )`) o de valores repetidos (`rep()`). Crear vectores de valores repetidos no aplica unicamente para datos numericos.

```{r}
f = 1:100
t = seq(from = 0,to = 100,by = .1)
(u = rep(5,20))
rep(5:7,3)
rep(5:7,each=3)
x
x + y
mean(x)
x - 2.5
x - mean(x)
```

### Texto (string, character)

Vectores de texto son usualmente el precursor de vectores categoricos o factores.

```{r}
z <- "pura vida"
z
dias <- c("lunes","martes","miercoles","jueves","viernes")
dias
```

### Categoricos (factores)

Vectores para datos categoricos en **R** son llamados factores, y estos factores van a contener niveles o clases. Este tipo de vector es muy utilizado en diversos analisis. El primer caso es un factor nominal (sin orden en los niveles/clases)

```{r}
dias.f = as_factor(dias)
dias.f
```

Factores ordinales pueden crearse usando el argumento `ordered = T`.

```{r}
ordenado = factor(c('Bajo','Medio','Alto', 'Medio', 'Bajo', 'Bajo', 'Alto'),
                  ordered = T, 
                  levels = c('Bajo','Medio','Alto'))
ordenado
```


## DataFrames, listas y tibbles

Vectores son unidimensionales y pueden almacenar datos de un solo tipo. DataFrames, listas y tibbles son objetos que pueden almacenar mas de 1 vector y los diferentes vectores pueden ser diferentes entre ellos. Esto es similar a una hoja de calculo donde cada columna es un vector.

Para DataFrames los contenidos pueden ser unicamente vectores de la misma longitud.

```{r}
DF = data.frame(Visitas=x,Revision=y,Dias=dias)
DF
names(DF)
names(DF)=c("Experimento","Valores","Tiempo")
DF
```

Para listas los contenidos pueden ser cualquier objeto y de cualquier dimension. Muchos de los resultados de funciones en **R** son listas.

```{r}
lst = list(Exp=x,Val=y,Dias=dias,Data=DF)
lst
lst[1]
lst[[1]]
lst[[1]][3]
```

Tibbles son un tipo especial de DataFrame, donde la principal diferencia es que pueden tener un contenido (columna) que puede ser una lista y esto puede brindar muchas facilidades a la hora de manipular y analizar los datos. Ademas no fuerza a datos de texto a factores y en la consola se despliega de manera mas amigable.

```{r}
tb = tibble(Visitas=x,Revision=y,Dias=dias,Extra=map(6:10,~rnorm(.x)))
tb
```

```{r}

```


## Verificando objetos

Hay funciones para verificar el tipo de objeto (`mode`, `is`), comprobar si es de un tipo en especifico (`is.`) y cambiar de un tipo a otro (`as.`).

```{r}
mode(x)
is(x)
x <- c(1, 2, 3, 4, 5, 6)
length(x)
x[6]<-"NA"
x
mode(x)
is.numeric(x)
x2 <- as.numeric(x)
x2
```

## Guardando el espacio de trabajo

Una vez se han generado objetos estos pueden ser guardados para compartir con otra gente o cargar en otra sesion para no tener que volver a generarlos.

```{r}
save.image("introR.rdata")
load("introR.rdata")
```


# Analisis Exploratorio de Datos (EDA)

## Importando/cargando datos

La mejor opcion para importar datos es usar `import` del paquete **rio**. Uno simplemente ocupa darle la direccion del archivo que se quiere importar y la funcion inteligentemente escoge la forma para importarlo.

```{r}
data("airquality")
head(airquality)
dat1 <- import(file.choose())
dat1 <- import("data/LungCapData2.csv")
titanic <- import("data/titanic.csv")
```

## Inspeccionando los datos

Aqui se muestran funciones basicas para explorar los datos y como acceder a ciertos datos en especifico. Dentro de las funciones mas usadas estan:

* `head`: Muestra las primeras 6 filas de un DataFrame (no es necesario usar esto con un Tibble ya que el Tibble muestra las primeras 10 filas por defecto)
* `tail`: Muestra las ultimas 6 filas
* `dim`: Muestra la dimension del objeto
* `summary`: Dependiendo del objeto esta funcion muestra diferentes cosas, en general siendo un resumen de los contenidos del objeto
* `str`: Muestra la estructura de los datos, indicando numero de variables y observaciones, asi como el tipo de variables (de nuevo esto lo muestra un Tibble por defecto)
* `names`: Muestra los nombres de los objetos; en el caso de DataFrames y Tibbles los nombres de las columnas, en el caso de una lista los nombres de los objetos dentro de la lista

Para acceder a los datos usando la notacion basica de **R** se usan los corchetes cuadrados `[,]`, donde el espacio antes de la coma se usa para seleccionar filas y el espacio despues para seleccionar columnas (de acuerdo al numero o al nombre). Para acceder a una columna se pueden usar tambien los dobles corchetes `[[]]` o el operados `$`.

```{r}
head(dat1)
tail(dat1)
dim(dat1)
dat1$Age
dat1[,1]
dat1[1,] 
dat1[1,1] 
head(dat1[,1:3])
head(dat1[,c(1,3,5)])
head(dat1[,c("Age","Height")])
head(dat1[["Age"]])
head(dat1["Age"])

summary(dat1)
str(dat1)
names(dat1)
levels(dat1$Gender)
levels(dat1$Gender) = c("Femenino","Masculino") # renombrar factores
levels(dat1$Smoke)
dat1$Smoke = factor(dat1$Smoke,levels = c("yes","no")) # reordenar factores
levels(dat1$Smoke)
summary(dat1)

dat1$Altura = dat1$Height*2.54
```


# Manipulacion de datos

Se mostro de manera muy rapida las funciones basicas de **R** porque se va a enfocar en el uso de funciones del *tidyverse*. Este meta-paquete es uno que engloba a un monton de paquetes que se rigen bajo el paradigma de datos ordenados (tidy data). Datos ordenados quiere decir una observacion por fila y cada variable en su columna.

Los paquetes mas usados e importantes son:

* `dplyr`: Manipulacion de datos mediante seleccion, filtrado, creacion, agrupamiento, arreglo y resumen de DataFrames y Tibbles
* `tidyr`: Convierte datos a ordenados y viceversa
* `ggplot2`: Paquete para crear graficos de alta calidad y personalizables
* `purrr`: Brinda funciones para la iteracion sobre vectores, listas y DataFrames
* `forcats`: Manipulacion de datos categoricos (factores)
* `stringr`: Manipulacion de datos de texto

## Objetos logicos

Objetos logicos permiten hacer comparaciones o pruebas, donde usualmente el resultado es TRUE o FALSE. En terminos numericos TRUE equivale a 1 y FALSE a 0.

```{r}
library(tidyverse)

x <- 4
x == 4
x != 4
x < 4
x <= 5
y <- c(95, 90, 58, 87, 62, 75)
y < 70
sum(y < 70)
sum(y[y < 70])
keep(y, ~.x < 70)
```

## Pipe operator

Uno de los operadores basicos en el *tidyverse* es el pipe operator ( %>% ). Este permite que el resultado antes del operador sea la entrada lo que se va a hacer despues del operador. La ventaja es que permite encadenar operaciones sin necesidad de salvar objetos intermedios y es mas facil de leer que encerrar operaciones una dentro de la otra. Se ejemplifica con un caso sencillo.

```{r}
set.seed(26)
e = runif(50,-10,10)
round(sqrt(mean(e^2)),3)
e %>% .^2 %>% mean() %>% sqrt() %>% round(3)
```

Lo anterior se lee: agarre el vector `e`, eleve sus valores al cuadrado, despues calcule la media, despues saquele la raiz y por ultimo redondeelo a 3 cifras.

## Resumen, filtrado, seleccion y creacion de variables

Para resumir datos la funcion principal es `summarise`, que colapsa una o varias columnas a un dato resumen. Muchas veces se tiene una variable agrupadora (factor) en los datos y se requiere calcular estadisticas por grupo, para esto se usa `group_by` junto con `summarise`.

Para seleccionar columnas la funcion es `select`, la cual puede usar numeros o nombres y los nombres no tienen que llevar comillas.

Para filtrar datos de acuerdo a criterior se usa la funcion `filter`, asi como operadores logicos y funciones auxualiares.

`arrange` se usa para ordenar los datos de acuerdo a una o mas variables.

Para crear o modificar variables se usa `mutate`.

```{r}
aggregate(Age ~ Gender, data = dat1, mean)

dat1 %>% 
  group_by(Gender) %>% 
  summarise(mean(Age))

dat1 %>% 
  group_by(Gender) %>% 
  select(Age) %>% 
  summarise_all(mean)

dat1 %>% 
  group_by(Gender) %>% 
  summarise(N=n(),mean(Age),mean(Height),mean(LungCap))

dat1 %>% 
  group_by(Gender,Smoke) %>% 
  summarise(mean(Age))

filter(airquality,Temp > 85)

airquality %>% 
  filter(Temp > 85)

airquality %>% 
  filter(Temp > 25, Wind > 10)

airquality %>% 
  filter(Temp > 25, Wind > 10) %>% 
  select(Ozone,Solar.R)

airquality %>% 
  select(Temp,Wind,Ozone)

airquality %>% 
  arrange(Temp)

airquality %>% 
  arrange(desc(Temp))

dat1 %>% 
  select(-Smoke)

dat1 %>% 
  pull(Age)

glimpse(titanic)
titanic = titanic %>% 
  mutate(Pclass = as_factor(Pclass),
         Survived = as_factor(Survived),
         Sex = as_factor(Sex))
glimpse(titanic)

dat1 %>% 
  mutate(Altura = Height*2.54)

airq = airquality %>% 
  mutate(Month = factor(Month,
                        levels = 5:9,
                        labels = c("Mayo", "Junio", "Julio", "Agosto", "Setiembre")))
airq

airquality %>% 
  as_tibble()
```


# Graficos

El paquete por exelencia para crear graficos en **R** es *ggplot2*. Este se basa en la gramatica de graficos (grammar of graphics), de ahi el *gg* en el nombre. 

La estructura basica de cualquier graficos es

```{r eval = FALSE}
ggplot(data = <DATA>) +
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>),
                  stat = <STAT>, position = <POSITION>) +
  <FACET_FUNCTION> +
  <SCALE_FUNCTION> +
  <THEME_FUNCTION>
```

donde las partes pricipales son `ggplot` y `geom_*`, el resto no son necesarias. Dentro de `geom_*` se mapean la variables del DataFrame a los argumentos de la funcion (x, y, col, fill, size, shape).

## Histograma

Para datos numericos continuos

```{r}
p = ggplot(data = airquality, mapping = aes(x=Temp)) +
  geom_histogram()
p

ggplot(airquality,aes(x=Temp)) +
  geom_histogram(bins = 20,col="black",fill="blue")

ggplot(airquality,aes(x=Temp)) +
  geom_histogram(binwidth = 2,col="black",fill="blue")

ggplot(airquality,aes(x=Temp)) +
  geom_histogram(bins = 20,col="black",fill="blue") +
  facet_wrap(~ Month)

ggplot(airquality,aes(x=Temp)) +
  geom_histogram(bins = 20,aes(y=stat(density)),col="black",fill="blue")

ggplot(airquality,aes(x=Temp)) +
  geom_histogram(bins = 20,aes(y=stat(density)),col="black",fill="blue") +
  geom_density(col="red")

ggplot(titanic, aes(x = Age, fill = Survived)) +
  facet_wrap(Sex ~ Pclass) +
  geom_density(alpha = 0.5)
```

## Barras

Para datos categoricos

```{r}
ggplot(dat1, aes(Gender,fill=Smoke)) + 
  geom_bar(position = "fill")

ggplot(dat1, aes(Gender,fill=Smoke)) + 
  geom_bar(position = "dodge")

ggplot(titanic, aes(x = Pclass, fill = Survived)) + 
  geom_bar()

ggplot(titanic, aes(x = Sex, fill = Survived)) + 
  facet_wrap(~ Pclass) + 
  geom_bar()

gss_cat %>% 
  ggplot(aes(marital)) + 
  geom_bar()

gss_cat %>% 
  ggplot(aes(fct_infreq(marital))) + 
  geom_bar()

```

## Boxplot

Para datos numericos continuos que normalmente se separan por una variable categorica

```{r}
ggplot(airq,aes(y=Temp)) +
  geom_boxplot()

ggplot(airq,aes(x = Month,y = Temp)) +
  geom_boxplot()

ggplot(airq,aes(x = Month,y = Temp)) +
  geom_boxplot(fill="white",col="red") +
  labs(x="Mes",y="Temperatura") +
  theme_bw()
```

## Dispersion

Para datos numericos continuos

```{r}
ggplot(airquality, aes(Ozone,Temp)) + 
  geom_point()

ggplot(airquality, aes(Ozone,Temp,col=factor(Month))) + 
  geom_point()

ggplot(airquality, aes(Wind,Temp)) + 
  geom_point() + 
  geom_smooth(method = "lm")

ggplot(airquality, aes(Ozone,Temp)) + 
  geom_point() + 
  geom_smooth(method = "lm", formula = y~poly(x,2))

ggplot(airquality, aes(Wind,Temp)) + 
  geom_point() + 
  geom_smooth(method = "lm") + 
  facet_wrap(~ Month)

summary(lm(Temp ~ Wind * factor(Month), airquality))
```


## Graficos estadisticos

Para resumir los datos

```{r}
ggplot(airquality, aes(Month, Temp)) +
  stat_summary(fun.y = mean,
               geom = "point",
               color = "black") +
  stat_summary(fun.data = mean_cl_normal,
               geom = "errorbar",
               width = 0.2) +
  theme_bw()

ggplot(airquality, aes(Month, Temp)) +
  stat_summary(fun.data = mean_cl_normal,
               geom = "pointrange",
               color = "red",
               size=1) +
  theme_bw()
```

## Salvando graficos

Funciones para salvar graficos, donde las extensiones mas usadas son `.png` y `.tiff`. Por defecto `ggsave` salva el ultimo grafico creado, a menos que se haya guardado el grafico en un objeto y se le pase dicho objeto al argumento `plot`.

```{r}
dev.copy2pdf(file="figs/Test.pdf")

dev.copy2eps(file="figs/Test.eps")

ggsave(filename = "figs/Testgg.png",
       plot = p, dpi = 300,
       width = 7, height = 4, units = "in",
       type = "cairo")
```

