---
title: "Lab 10: Estadistica Direccional"
author: "Maximiliano Garnier Villarreal"
lang: es
toc: true
toc-depth: 3
toc-title: Contenidos
number-sections: true
highlight-style: pygments
theme: sandstone
format:
  html:
    embed-resources: true
    code-fold: true
    code-summary: "Codigo"
    code-tools: true
    html-math-method: katex
  pdf: 
    prefer-html: false
  docx: default
execute:
  warning: false
  error: false
  echo: true
---

# Paquetes

```{r}
#| label: setup
#| include: false

library(GMisc)
library(Directional)
library(circular)
library(CircStats)
library(tidyverse)

theme_set(theme_minimal(base_size = 14))

circ_disp = function(theta) {
  thetarad = theta*pi/180
  tm1 = trig.moment(thetarad,p = 1)
  tm2 = trig.moment(thetarad,p = 2)
  delta = (1-tm2[[2]])/(2*tm1[[2]]^2)
  delta
}
```

# Vector de mediciones angulares

```{r}
theta = c(255, 239, 222, 231, 199, 271, 222, 274, 228, 246, 
          177, 199, 257, 201, 237, 209, 216, 180, 182, 250, 
          219, 196, 197, 246, 218, 235, 232, 243, 232, 180, 
          231, 254, 242, 149, 212, 210, 230, 205, 220, 268)
```

# Ajuste para datos no-direccionales

Si los datos son no-direccionales deben multiplicarse por 2 para convertirlos a direccionales y realizar los calculos sobre estos

Direccion de datos:

-   `d=0` para no-direccional
-   `d=1` para direccional

```{r}
d = 1

theta = case_when(d==1 ~ theta, .default = theta*2)

thetac = circular(theta,units = 'degrees')
thetarad = theta*pi/180
N = length(theta)
```

# A mano

## Analisis de una muestra

### Componentes del vector medio

```{r}
S = sum(sin(thetarad))
C = sum(cos(thetarad))
meanrad = atan(S/C) # direccion media en radianes
meandeg = degs(meanrad) # direccion media en grados
```

### Verdadera direccion media

Para datos no-direccionales hay que dividir por 2 la direccion verdadera.

```{r}
meantrue = case_when(
  S > 0 & C > 0 ~ meandeg,
  S < 0 & C > 0 ~ meandeg + 360,
  .default = meandeg + 180
)
meantrue

# verdadera direccion media de datos no-direccionales
meantrue = ifelse(d == 0, meantrue/2, meantrue)
```

### Otras estadisticas

-   $\bar{R}$: resultante media
-   $V$: varianza circular
-   $v$: desviacion estandar circular
-   $\kappa$: parametro de concentracion

```{r}
(R = sqrt(S^2+C^2)) # resultante
(Rbar = sqrt(S^2+C^2)/N) # resultante media
(V = 1-Rbar) # varianza circular
(v = sqrt(-2*log(Rbar))) # desviacion estandar circular
(k.ml = case_when(Rbar < .53 ~ 2*Rbar + Rbar^3 + 5/6*Rbar^5,
                  Rbar < .85 ~ -.4 + 1.39*Rbar + .43/(1-Rbar),
                  .default = (Rbar^3 - 4*Rbar^2 + 3*Rbar)^(-1)))
(k = case_when(N > 15 ~ k.ml,
               k.ml < 2 ~ max(c(k.ml - 2*(N*k.ml)^(-1),0)),
               .default = (N-1)^3*k.ml/(N^3+N)))
# (k = ifelse(Rbar<0.65, 
#             Rbar/6*(12+6*Rbar^2+5*Rbar^4), 
#             1/(2*(1-Rbar)-(1-Rbar)^2-(1-Rbar)^3)))
```

### Prueba de aleatoriedad

$$H_0: k = 0, \text{ los datos siguen una distribucion aleatoria}$$
```{r}
z.r = N*Rbar^2
p.r = ifelse(N >= 50, exp(-z.r),
             exp(-z.r)*(1+(2*z.r-z.r^2)/(4*N)-
                          (24*z.r-132*z.r^2+76*z.r^3-9*z.r^4)/(288*N^2)))
p.r
```

```{r}
R_crit(n = N, conf.level = 1-a)
Rbar
```

### Prueba de tendencia (cono de confianza)

$$H_0: \bar{\theta} = \theta_0$$

```{r}
a = 0.05
se = (1/sqrt(N*Rbar*k))
(cono = asin(se*qnorm(1-a/2))*180/pi)
# (cono = qnorm(1-a/2)*se)
cono_sup = meantrue + cono
cono_inf = meantrue - cono
cono_inf; meantrue; cono_sup
```

### Diagrama de rosas

Diagrama de rosos mostrando la direccion media y cono de confianza

```{r}
rose_diag_2D(x = theta, width = 10, dir = d, conf.level = 1-a)
```

## Analisis de dos muestras

$$H_0: \bar{\theta}_1 = \bar{\theta}_2$$

Recordar realizar los ajustes necesarios si se trabaja con datos no-direccionales

```{r}
theta2 = c(225, 208, 172, 198, 204, 183, 190, 212, 247, 
           127, 167, 234, 217, 192, 212, 171, 169, 210, 
           245, 222, 185, 227, 193, 178, 187, 182, 194, 
           217, 168, 211, 234, 204, 221, 198, 261, 228, 
           146, 201, 146, 231)

d = 1

theta2 = case_when(d==1 ~ theta2, .default = theta2*2)

theta2c = circular(theta2,units = 'degrees')

theta2rad = rads(theta2)
```

```{r}
thetaall = c(theta,theta2)
thetaallrad = rads(thetaall)
Nall = length(thetaall)
circ.disp(thetaallrad)
```

### Igualdad de parametro de concentracion

```{r}
(f.k = est.kappa(thetarad)/est.kappa(theta2rad))
qf(1-a,length(theta)-1,length(theta2)-1)
```

### Igualdad de direccion media

```{r}
(R1 = circ.disp(thetarad)[[2]])
(R2 = circ.disp(theta2rad)[[2]])
(Rt = circ.disp(thetaallrad)[[2]])
(kt = est.kappa(thetaallrad))

(f = ifelse(kt > 2, 
           ((Nall - 2)*(R1+R2-Rt))/(Nall-R1-R2),
           (1+3/(8*kt))*((Nall-2)*(R1+R2-Rt))/(Nall-R1-R2)))

v1 = 1
v2 = Nall-2

(fcrit = qf(1-a,v1,v2))
f > fcrit
pf(f,v1,v2,lower.tail = F)
```

# Con funciones

## Una muestra

### Direccion media

```{r}
# vm.ml(thetarad, bias = F)
meandeg = deg(circ.mean(thetarad))
(meantrue = ifelse(meandeg < 0, meandeg+360, meandeg))
```

### Otras estadisticas

```{r}
est.rho(thetarad) # resultante media
est.kappa(thetarad, bias = F) # parametro concentracion
circ.disp(thetarad) # medidas de dispersion
sd.circular(thetac) # desviacion estandar
var.circular(thetac) # varianza
circ_disp(theta) # dispersion 
```

### Prueba de aleatoriedad

```{r}
r.test(theta,degree = T)
# watson(thetarad)
# rao.spacing(thetarad)
# kuiper(thetarad)
```

### Prueba de tendencia

```{r}
theta.ci = vm.bootstrap.ci(thetarad, bias = F, alpha = a)
deg(theta.ci$mu.ci)
```

### Varios en una

```{r}
dir_stats_2D(theta,dir = 1,conf.level = 1-a)
```

```{r}
Directional::circ.summary(theta,rads = F)
```

## Dos+ muestras

```{r}
grps = rep(1:2,
           c(length(theta),length(theta2)))
```

### Prueba de parametro de concentracion

```{r}
conc.test(u = thetaall,
          ina = grps,
          rads = F) # 2+
```

### Prueba de direccion media

```{r}
# Parametros de concentracion iguales
watson.williams.test(list(thetac, theta2c)) # 2+

rao.homogeneity(list(thetarad, theta2rad)) # 2+

hcfcirc.boot(thetarad, theta2rad, rads = T) # 2
hcf.circaov(thetaall, grps, rads = F) # 2+

lrcirc.boot(thetarad, theta2rad, rads = T) # 2
lr.circaov(thetaall, grps, rads = F) # 2+

# Parametros de concentracion diferentes
hetcirc.boot(thetarad, theta2rad, rads = T) # 2
het.circaov(thetaall, grps, rads = F) # 2+
```

