---
title: "Lab 11: Secuencias"
author: "Maximiliano Garnier Villarreal"
lang: es
toc: true
toc-depth: 2
toc-title: Contenidos
number-sections: true
highlight-style: pygments
theme: sandstone
format:
  html:
    code-fold: true
    html-math-method: katex
  pdf: default
  docx: default
execute:
  warning: false
  error: false
  echo: true
---

```{r}
#| label: setup
#| include: false

library(GMisc)
library(flextable)
library(ggeffects)
library(DescTools)
library(modelsummary)
library(broom)
library(timetk)
library(tidyverse)
library(easystats)

theme_set(theme_minimal(base_size = 14))

formato.salida = case_when(
  knitr::is_html_output() ~ 'html',
  knitr::is_latex_output() ~ 'latex',
  T  ~ 'simple',
)

options(
  knitr.table.format = formato.salida,
  modelsummary_get = 'all'
  # OutDec = ','
  , digits = 3
)

set_flextable_defaults(
  # decimal.mark = ',',
  # big.mark = '.',
  digits = 3
)

knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  error = FALSE,
  # fig.path = "figs/",
  fig.retina = 3,
  fig.width = 8,
  fig.asp = 0.618,
  # fig.align = "center",
  out.width = "90%"
)
```


# Prueba de tendencia (Spearman)

Se determina si la longitud de los intervalos varia en el tiempo/espacio

```{r}
x = c(0.5,2.3,3.2,4.2,4.9,7,11.4,12.7,14.6,
      16,21.5,22.5,25.8,30.3,31.9,36.2,42.8)
n = length(x)
i = seq(1,n-1,1)
h = NULL
for (j in 1:n-1) {
  h[j] = x[j+1]-x[j]
}
rankh = rank(h,ties.method = "average")
(rs = 1-(6*sum((i-rankh)^2))/(length(i)*(length(i)^2-1)))
cor.test(i,h,method = "spearman") %>% tidy()
cor.test(i,rankh) %>% tidy()
```


# Prueba de corridas

Se determina si la secuencia es aleatoria o no

```{r}
dens = c(3.57,3.63,2.86,2.94,3.42,2.85,3.67,3.78,3.86,
         4.02,4.56,4.62,4.31,4.58,5.02,4.68,4.37,4.88,
         4.52,4.80,4.55,4.62,4.93,4.60,4.51,3.98,4.22,
         3.52,2.91,3.87,3.52,3.77,3.84,3.92,4.09,3.86,
         4.13,3.92,3.54)

(dens2 = dichotomy(dens, criteria = 'median')) # dicotomiza los datos

RunsTest(dens2,correct = F) %>% tidy() # test de corridas
```


# Regresion

La idea es determinar si un modelo es significativo o no, o sea si los coeficientes (especialmente la pendiente $\hat{b}_1$) son significativos

En el caso de un modelo mas complejo de uno lineal la idea es determinar si la adicion de los nuevos terminos es significativa y explica (se ajusta) mejor (a) los datos

```{r reg-data}
alpha = 0.05

depth = seq(1,36,5) # profundidad
moist = c(124,78,54,35,30,21,22,18) # contenido de humedad

DF3 = tibble(depth, moist)
```

```{r}
ggplot(DF3, aes(depth,moist)) + 
  geom_point()
```

```{r reg-lin}
fit1 = lm(moist~depth) # modelo lineal

tidy(fit1, conf.int = T, conf.level = .95) # resumen modelo lineal
model_performance(fit1) # ajuste del modelo lineal

sjstats::cv(fit1) # coef var modelo lineal

check_model(fit1,panel = F)
```

```{r reg-cuad}
fit2 = lm(moist~depth+I(depth^2)) # modelo cuadratico

tidy(fit2, conf.int = T, conf.level = .95) # resumen modelo cuadratico
model_performance(fit2) # ajuste del modelo cuadratico

sjstats::cv(fit2) # coef var modelo cuadratico

check_model(fit2,panel = F)
```

```{r reg-log}
fit3 = lm(moist~log(depth)) # modelo logaritmico

tidy(fit3, conf.int = T, conf.level = .95) # resumen modelo cuadratico
model_performance(fit3) # ajuste del modelo cuadratico

sjstats::cv(fit3) # coef var modelo logaritmico

check_model(fit3,panel = F)
```

```{r reg-plots}
ggplot(DF3, aes(depth, moist)) + 
  geom_point(size=3) +
  geom_smooth(method = 'lm', aes(col = 'Lineal'), se = F) + 
  geom_smooth(method = 'lm', aes(col = 'Cuadratico'), se = F,
              formula = y ~ poly(x,2)) +
  geom_smooth(method = 'lm', aes(col = 'Logaritmico'), se = F,
              formula = y ~ log(x)) +
  scale_color_brewer('Modelo', palette = 'Dark2')
```

```{r reg-lin-plot}
plot(ggpredict(fit1),rawdata = T)
```

```{r reg-cuad-plot}
plot(ggpredict(fit2),rawdata = T)
```

```{r reg-log-plot}
plot(ggpredict(fit3),rawdata = T)
```

## Comparacion de modelos

```{r comp-anova}
anova(fit1,fit2)
anova(fit3,fit2)
```

```{r comp-performance}
comp.mods = compare_performance(fit1,fit2,fit3,rank = T) # performance
comp.mods
plot(comp.mods)
```

```{r comp-modsum}
modelsummary(list(Lineal=fit1,Cuadratico=fit2,Logaritmico=fit3),
             title = 'Comparasion de modelos',
             statistic = 'conf.int',
             coef_omit = NULL, # 'Int'
             gof_omit = '^(?!R|Num|A)',
             stars = T,
             fmt = 2)
```

```{r comp-sjtab}
sjPlot::tab_model(fit1,fit2,fit3,
                  title = 'Comparasion de modelos',
                  show.std = NULL, # 'std', NULL
                  show.est = T,
                  show.intercept = T,
                  show.ci = .95,
                  collapse.ci = T,
                  ci.hyphen = ', ',
                  show.stat = F,
                  show.p = T,
                  p.style = "stars",
                  show.aic = T,
                  dv.labels = c('Lineal','Cuadrático','Logaritmico'),
                  digits = 2,
                  file = 'sjplot_models_lab11.doc')
```

```{r comp-sjplot}
sjPlot::plot_models(fit1,fit2,fit3,
                    std.est = NULL, # 'std', NULL
                    show.values = T,
                    show.p = T,
                    m.labels = c('Lineal','Cuadrático','Logaritmico'),
                    legend.title = 'Modelo')
```

```{r cuad-stats-plot}
ggstatsplot::ggcoefstats(fit2,exclude.intercept = T)
```

```{r log-stats-plot}
ggstatsplot::ggcoefstats(fit3,exclude.intercept = T)
```


# Autocorrelacion

Determina si hay ciclos, patrones, tendencia, sobre una serie de datos ordenados equidistantemente en el espacio/tiempo.

## Como remover una tendencia de una serie de datos

Pasos:

1. Determinar si hay una tendencia
    a. Construir modelo lineal
    a. Determinar si la pendiente es significativa

2. Si hay tendencia, calcular los residuos

```{r ts-data}
AirPassengers
zoo::autoplot.zoo(AirPassengers) # estatico
```

```{r ts-int1}
AirPassengers %>% tidy() %>% dygraphs::dygraph() # interactivo
```

```{r ts-int2}
AirPassengers %>% highcharter::hchart() # interactivo
```

```{r ts-tb}
DF = AirPassengers %>% 
  tidy() %>% 
  mutate(log.value = log(value))

DF %>% 
  plot_time_series(index,value,
                   .interactive = F) # estatico o interactivo
```

```{r ts-plot}
ggplot(DF, aes(index,value)) +
  geom_line() +
  geom_smooth(method = 'lm')
```

```{r ts-mod}
mod = lm(value ~ index, data = DF)

model_parameters(mod) # resumen del modelo
model_performance(mod) # ajuste del modelo

DF2 = augment(mod)  # data frame incluyendo residuales 
```

```{r ts-resid}
ggplot(DF2, aes(index,.resid)) +
  geom_line() + 
  geom_hline(yintercept = 0, col = 2)
```

Sin remover tendencia

```{r acf-trend}
DF %>% plot_acf_diagnostics(index,value,
                            .lags = nrow(.)/3,
                            .show_white_noise_bars = T,
                            .interactive = T)
```

Despues de remover tendencia

```{r acf-no-trend}
DF2 %>% plot_acf_diagnostics(index,.resid,
                             .lags = nrow(.)/3,
                             .show_white_noise_bars = T,
                             .interactive = T)
```

## Objeto dataframe

```{r acf-diag}
ac.1 = DF2 %>% tk_acf_diagnostics(index, .resid, .lags = nrow(.)/3)
ac.1
```

```{r acf-test}
lag.t = ac.1 %>% filter(ACF<0)

(rtau.1 = max(ac.1[which(ac.1$lag==pull(lag.t[1,1])):nrow(ac.1),2])) # valor maximo de autocorrelacion

(tau.1 = ac.1$lag[ac.1$ACF==rtau.1]) # lag donde ocurre el valor maximo de autocorrelacion

(z.1 = rtau.1*sqrt(nrow(DF2)-tau.1+3)) # test de significancia de autocorrelacion
```

## Objeto serie temporal

```{r}
DF.ts = zoo::zoo(DF2$.resid,DF2$index)
DF.ts = lh

(n = length(DF.ts))
(f = frequency(DF.ts))

ac1 = acf(DF.ts,lag.max = length(DF.ts)/3)
lagt = ac1$acf[ac1$acf<0]

(rtau1 = max(ac1$acf[which(ac1$acf==lagt[1]):length(ac1$acf)])) # valor maximo de autocorrelacion

(tau1 = ac1$lag[ac1$acf==rtau1]*f) # lag donde ocurre el valor maximo de autocorrelacion

(z1 = rtau1*sqrt(n-tau1+3)) # test de significancia de autocorrelacion
```







