---
title: "Lab 11: Secuencias"
author: "Maximiliano Garnier Villarreal"
lang: es
toc: true
toc-depth: 3
toc-title: Contenidos
number-sections: true
highlight-style: pygments
theme: sandstone
format:
  html:
    code-fold: true
    code-summary: "Codigo"
    code-tools: true
    html-math-method: katex
  pdf: default
  docx: default
execute:
  warning: false
  error: false
  echo: true
---

# Paquetes

```{r}
#| label: setup
#| include: false

library(GMisc)
library(flextable)
library(sjPlot)
library(DescTools)
library(modelsummary)
library(broom)
library(timetk)
library(tidyverse)
library(easystats)

theme_set(theme_minimal(base_size = 14))

options(
  modelsummary_get = 'all'
  # OutDec = ','
  , digits = 3
)

set_flextable_defaults(
  # decimal.mark = ',',
  # big.mark = '.',
  digits = 3
)
```

# Prueba de tendencia (Spearman)

Se determina si la longitud de los intervalos varia en el tiempo/espacio

$$H_0 : \text{longitud de intervalos es igual}$$

```{r}
x = c(0.5,2.3,3.2,4.2,4.9,7,11.4,12.7,14.6,
      16,21.5,22.5,25.8,30.3,31.9,36.2,42.8) %>% 
  sort()

n = length(x)
i = seq(1,n-1,1)
h = NULL

for (j in 1:n-1) {
  h[j] = x[j+1]-x[j]
}

rankh = rank(h,ties.method = "average")
(rs = 1-(6*sum((i-rankh)^2))/(length(i)*(length(i)^2-1)))
cor.test(i,h,method = "spearman") %>% tidy()
cor.test(i,rankh) %>% tidy()
```

# Prueba de corridas

Se determina si la secuencia, dicotomica, es aleatoria o no. Si se tienen datos continuos se tienen que dicotomizar, se pueden usar los criterios con respecto a la mediana (`median`) o arriba-abajo (`up-down`).

$$H_0 : \text{secuencia es aleatoria}$$

```{r}
dens = c(3.57,3.63,2.86,2.94,3.42,2.85,3.67,3.78,3.86,
         4.02,4.56,4.62,4.31,4.58,5.02,4.68,4.37,4.88,
         4.52,4.80,4.55,4.62,4.93,4.60,4.51,3.98,4.22,
         3.52,2.91,3.87,3.52,3.77,3.84,3.92,4.09,3.86,
         4.13,3.92,3.54)

(dens2 = dichotomy(dens, criteria = 'median')) # dicotomiza los datos

RunsTest(dens2,correct = F) %>% tidy() # test de corridas
```

# Regresion

La idea es determinar si un modelo es significativo o no, o sea si los coeficientes (especialmente la pendiente $\hat{b}_1$) son significativos

$$H_0 : \hat{b}_1 = 0$$

En el caso de un modelo mas complejo de uno lineal la idea es determinar si la adicion de los nuevos terminos es significativa y explica (se ajusta) mejor (a) los datos

$$H_0 : \hat{b}_n = 0$$

```{r reg-data}
alpha = 0.05

depth = seq(1,36,5) # profundidad
moist = c(124,78,54,35,30,21,22,18) # contenido de humedad

DF3 = tibble(depth, moist)
```

## Grafico

```{r}
ggplot(DF3, aes(depth,moist)) + 
  geom_point()
```

## Modelo lineal

```{r reg-lin}
fit1 = lm(moist~depth) # modelo lineal

tidy(fit1, conf.int = T, conf.level = .95) # resumen modelo lineal
model_performance(fit1) # ajuste del modelo lineal

sjstats::cv(fit1) # coef var modelo lineal

check_model(fit1,panel = F)
```

## Modelo cuadratico

```{r reg-cuad}
fit2 = lm(moist~depth+I(depth^2)) # modelo cuadratico

tidy(fit2, conf.int = T, conf.level = .95) # resumen modelo cuadratico
model_performance(fit2) # ajuste del modelo cuadratico

sjstats::cv(fit2) # coef var modelo cuadratico

check_model(fit2,panel = F)
```

## Modelo logaritmico

```{r reg-log}
fit3 = lm(moist~log(depth)) # modelo logaritmico

tidy(fit3, conf.int = T, conf.level = .95) # resumen modelo cuadratico
model_performance(fit3) # ajuste del modelo cuadratico

sjstats::cv(fit3) # coef var modelo logaritmico

check_model(fit3,panel = F)
```

## Grafico con modelos

```{r reg-plots}
ggplot(DF3, aes(depth, moist)) + 
  geom_point(size=3) +
  geom_smooth(method = 'lm', aes(col = 'Lineal'), se = F) + 
  geom_smooth(method = 'lm', aes(col = 'Cuadratico'), se = F,
              formula = y ~ poly(x,2)) +
  geom_smooth(method = 'lm', aes(col = 'Logaritmico'), se = F,
              formula = y ~ log(x)) +
  scale_color_brewer('Modelo', palette = 'Dark2')
```

```{r reg-lin-plot}
plot_model(fit1, type = 'pred', show.data = T)
```

```{r reg-cuad-plot}
plot_model(fit2, type = 'pred', terms = 'depth [n=50]', show.data = T)
```

```{r reg-log-plot}
plot_model(fit3, type = 'pred', terms = 'depth [n=50]', show.data = T)
```

## Comparacion de modelos

```{r comp-anova}
anova(fit1,fit2)
anova(fit3,fit2)
```

```{r comp-performance}
comp.mods = compare_performance(list(lin=fit1,cuad=fit2,log=fit3),
                                rank = T) # performance
comp.mods
plot(comp.mods)
```

```{r comp-modsum}
modelsummary(list(Lineal=fit1,Cuadratico=fit2,Logaritmico=fit3),
             title = 'Comparacion de modelos',
             statistic = 'conf.int',
             coef_omit = NULL, # 'Int'
             gof_omit = '^(?!R|Num|A)',
             stars = T,
             fmt = 2)
```

```{r comp-sjtab}
sjPlot::tab_model(fit1,fit2,fit3,
                  title = 'Comparasion de modelos',
                  show.std = NULL, # 'std', NULL
                  show.est = T,
                  show.intercept = T,
                  show.ci = .95,
                  collapse.ci = T,
                  ci.hyphen = ', ',
                  show.stat = F,
                  show.p = T,
                  p.style = "stars",
                  show.aic = T,
                  dv.labels = c('Lineal','Cuadrático','Logaritmico'),
                  digits = 2,
                  file = 'sjplot_models_lab11.doc')
```

```{r comp-sjplot}
sjPlot::plot_models(fit1,fit2,fit3,
                    std.est = NULL, # 'std', NULL
                    show.values = T,
                    show.p = T,
                    m.labels = c('Lineal','Cuadrático','Logaritmico'),
                    legend.title = 'Modelo')
```

## Graficos de coeficientes

```{r cuad-stats-plot}
ggstatsplot::ggcoefstats(fit2,exclude.intercept = T)
```

```{r log-stats-plot}
ggstatsplot::ggcoefstats(fit3,exclude.intercept = T)
```

# Autocorrelacion

Determina si hay ciclos, patrones, tendencia, sobre una serie de datos ordenados, preferiblemente equidistantemente, en el espacio/tiempo.

## Visualizar los datos

```{r ts-data}
AirPassengers
zoo::autoplot.zoo(AirPassengers) # estatico
```

```{r ts-int1}
AirPassengers %>% tidy() %>% dygraphs::dygraph() # interactivo
```

```{r ts-int2}
AirPassengers %>% highcharter::hchart() # interactivo
```

```{r ts-tb}
DF = AirPassengers %>% 
  tidy() %>% 
  mutate(log.value = log(value))

DF %>% 
  plot_time_series(index,value,
                   .interactive = F) # estatico o interactivo
```

## Como remover una tendencia de una serie de datos

Pasos:

1.  Determinar si hay una tendencia

    a. Visualizar los datos 
    b. Construir modelo lineal
    c. Determinar si la pendiente es significativa

2.  Si hay tendencia, calcular los residuos

### Visualizar datos

```{r ts-plot}
ggplot(DF, aes(index,value)) +
  geom_line() +
  geom_smooth(method = 'lm')
```

### Modelo y residuos

```{r ts-mod}
mod = lm(value ~ index, data = DF)

model_parameters(mod, digits=3, ci_digits=3) # resumen del modelo
model_performance(mod) # ajuste del modelo

DF2 = augment(mod)  # data frame incluyendo residuales 
```

### Visualizar residuales

```{r ts-resid}
ggplot(DF2, aes(index,.resid)) +
  geom_line() + 
  geom_hline(yintercept = 0, col = 2)
```


## Grafico de autocorrelacion

### Sin remover tendencia

```{r acf-trend}
DF %>% plot_acf_diagnostics(index,value,
                            .lags = nrow(.)/3,
                            .show_white_noise_bars = T,
                            .interactive = T)
```

### Despues de remover tendencia

```{r acf-no-trend}
DF2 %>% plot_acf_diagnostics(index,.resid,
                             .lags = nrow(.)/3,
                             .show_white_noise_bars = T,
                             .interactive = T)
```

## Prueba de autocorrelacion

### Objeto dataframe

```{r acf-diag}
n = nrow(DF2)
lag.max = n/3
delta = diff(DF2 %>% pull(index))[1]

ac.1 = DF2 %>% tk_acf_diagnostics(index, .resid, .lags = lag.max)
ac.1
```

```{r acf-test}
lag.t = ac.1 %>% filter(ACF<0)

rtau.1 = max(ac.1[which(ac.1$lag==pull(lag.t[1,1])):nrow(ac.1),2]) # valor maximo de autocorrelacion

tau.1 = ac.1$lag[ac.1$ACF==rtau.1] # lag donde ocurre el valor maximo de autocorrelacion

z.1 = rtau.1*sqrt(n-tau.1+3) # test de significancia de autocorrelacion

p.ac = pnorm(-abs(z.1))*2 # valor-p

ac.dist = tau.1 * delta # distancia de autocorrelacion

ac_res = tibble(
  estimate = rtau.1,
  lag = tau.1,
  delta = delta,
  dist = ac.dist,
  statistic = z.1,
  p.value = p.ac
)
ac_res
```

### Objeto serie temporal

```{r}
DF.ts = zoo::zoo(DF2$.resid,DF2$index)
# DF.ts = lh

n = length(DF.ts)
lag.max = n/3
f = frequency(DF.ts)
delta = deltat(DF.ts)

ac1 = acf(DF.ts,lag.max = n/3)
lagt = ac1$acf[ac1$acf<0]

rtau1 = max(ac1$acf[which(ac1$acf==lagt[1]):length(ac1$acf)]) # valor maximo de autocorrelacion

tau1 = ac1$lag[ac1$acf==rtau1]*f # lag donde ocurre el valor maximo de autocorrelacion

z1 = rtau1*sqrt(n-tau1+3) # test de significancia de autocorrelacion

p.ac = pnorm(-abs(z1))*2 # valor-p

ac.dist = tau1 * delta*f # distancia de autocorrelacion

ac_res = tibble(
  estimate = rtau1,
  lag = tau1,
  delta = delta,
  dist = ac.dist,
  statistic = z1,
  p.value = p.ac
)
ac_res
```

### Modelo

```{r}
car::durbinWatsonTest(mod,lag.max) %>% 
  tidy %>% 
  rownames_to_column('lag') %>% 
  # filter(autocorrelation > 0) %>% 
  slice_max(abs(autocorrelation), n = 10)
```

